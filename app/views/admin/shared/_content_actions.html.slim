.content_actions.clearfix
  - if settings[:batch] && current_index_view =~ /table/
    .btn-group
      a.btn.dropdown-toggle data-toggle="dropdown" href="#"
        = t 'admin.batch_actions.title'
        span.caret
      ul.dropdown-menu
        - batch_action_list.each do |batch_action|
          li
            a.batch_action_link(
              href='#'
              data-form=batch_action.form
              data-action=batch_action.name
              data-confirm=batch_action.confirm
            )
              = batch_action.title
  - unless button_scopes.blank?
    .btn-group
      - button_scopes.each do |name, opts|
        - next if opts[:if] && !call_method_or_proc_on(controller, opts[:if])
        - param_name = opts[:as] || name
        - active = params[param_name]
        a.btn href=url_for(param_name => (active ? nil : 1)) class=[opts[:class], ('active' if active)]
          = opts[:title] || t("admin.scopes.#{name}", default: name.to_s.titleize)
          - if opts[:badge]
            - scope = opts[:block] ? opts[:block].call(controller, resource_class) : resource_class.send(name)
            - scope_count = scope.send(*[opts[:badge][:value_type] || :count, opts[:badge][:column]].compact)
            - unless scope_count.zero?
              span.badge< class=("badge-#{opts[:badge].try(:[], :type) || 'important'}") = scope_count

  .btn-group#columns_hider_wrap
    a.btn.dropdown-toggle data-toggle="dropdown" href="#"
      = t 'admin.columns_hider.button'
      span.caret
    .dropdown-menu


  .btn-group#view_layout
    .btn data-css='main_wide' = icon('align-left')
    .btn data-css='main_reverse' = icon('align-right')

  - if normalized_index_views.length > 1
    .btn-group#index_views
      - normalized_index_views.each do |index_view|
        = index_view_link(index_view)

  - if can?(:export, resource_class) && !settings[:skip_export]
    .btn-group.downloads
      = icon('download-alt')
      /- %w(csv xls json).each do |format|
      - %w(csv xlsx).each do |format|
        - next if format == 'xlsx' && !Mime[:xlsx]
        = link_to format, params_for_links.merge(per_page: 10_000, format: format), id: "export_#{format}"

  - if @search && settings[:sort_buttons]
    .btn-group
      - settings[:sort_buttons].each do |opts|
        = list_sort_link(opts[:title], column: opts[:column], html_options: {class: 'btn'})

  - if @search_collection && settings[:aggregations]
    .aggregations
      - settings[:aggregations].each do |ag|
        .label> class=(ag[:css] || 'label-success')
          => ag[:label] || "#{ag[:column].to_s.humanize}:"
          - if !ag[:type] || ag[:type] == :sum
            = @search_collection.distinct(false).sum(ag[:column]).try!(:round, 2)
          - elsif ag[:type] == :average
            = @search_collection.average(ag[:column]).try!(:round, 2)